import scala.collection.mutable.ArrayBuffer

trait IntQueue {
  def get(): Int
  def put(x: Int)
  def list(): ArrayBuffer[Int]
}

class BasicIntQueue extends IntQueue {
  private val buf = new ArrayBuffer[Int]
  def get() = buf.remove(0)
  def put(x: Int) { buf += x }
  def list() = buf
}
val basicQueue = new BasicIntQueue
basicQueue.put(10)
basicQueue.put(20)
basicQueue.list()













trait Incrementing extends IntQueue {
  abstract override def put(x: Int) {
    super.put(x + 1)
  }
}

trait Filtering extends IntQueue {
  abstract override def put(x: Int) {
    if (x >= 0) super.put(x)
  }
}

val queueWithIncFirst = new BasicIntQueue
  with Incrementing with Filtering
queueWithIncFirst.put(-1)
queueWithIncFirst.put(0)
queueWithIncFirst.put(1)
queueWithIncFirst.list()









val queueWithFiltFirst = new BasicIntQueue
  with Filtering with Incrementing
queueWithFiltFirst.put(-1)
queueWithFiltFirst.put(0)
queueWithFiltFirst.put(1)
queueWithFiltFirst.list()